@page "/weather"
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@inject HttpClient Http
@attribute [Authorize]
@inject AuthenticationStateProvider StateProvider
<PageTitle>Weather</PageTitle>
<AuthorizeView>
    <Authorized>
        <h1>Weather</h1>
        <h4>@UserId</h4>
        <h4>@Username</h4>
        <h4>@Role</h4>

        <p>This component demonstrates fetching data from the server.</p>

        @if (forecasts == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Temp. (C)</th>
                        <th>Temp. (F)</th>
                        <th>Summary</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var forecast in forecasts)
                    {
                        <tr>
                            <td>@forecast.Date.ToShortDateString()</td>
                            <td>@forecast.TemperatureC</td>
                            <td>@forecast.TemperatureF</td>
                            <td>@forecast.Summary</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </Authorized>
    <NotAuthorized>
        <h1>You are not logged in</h1>
    </NotAuthorized>
</AuthorizeView>


@code {
    private WeatherForecast[]? forecasts;
    private string UserId { get; set; }
    private string Username { get; set; }
    private string Role { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var stateProvider = (Services.CustomAuthProvider)StateProvider;
        var state = await stateProvider.GetAuthenticationStateAsync();
        UserId = state.User.Claims.FirstOrDefault(x => x.Type == ClaimTypes.NameIdentifier)!.Value;
        Username = state.User.Claims.FirstOrDefault(x => x.Type == ClaimTypes.GivenName)!.Value;
        Role = state.User.Claims.FirstOrDefault(x => x.Type == ClaimTypes.Role)!.Value;
        
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");
    }

    public class WeatherForecast
    {
        public DateOnly Date { get; set; }

        public int TemperatureC { get; set; }

        public string? Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
